swagger: "2.0"
info:
  description: "Esté es un ejemplo de documentación de API, puedes incluir url por ejemplo: [http://google.com](http://google.com)"
  version: "1.0.0"
  title: "Loro API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "paco@mail.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "echo-api.endpoints.root-welder-193802.cloud.goog"
x-google-endpoints:
    - name: "echo-api.endpoints.root-welder-193802.cloud.goog"
      target: "35.202.172.251"
basePath: "/"
tags:
- name: "post"
  description: "Manejo de Posts"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "user"
  description: "Manejo de usuarios"
- name: "token"
  description: "Autenticación por Token"
schemes:
- "http"
- "https"
paths:
  /posts:
    get:
      tags:
      - "post"
      summary: "Obtiene la lista de todos los post"
      description : "Obtiene la lista de todos los post activos"
      operationId : getPostList
      produces:
      - "application/json"
      responses:
        200:
          description: "Ok"
        401:
          description: "Invalid Request"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    post:
      tags:
      - "post"
      summary: "Agrega un nuevo post"
      description: ""
      operationId : createPost
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "New post"
        schema:
          $ref: "#/definitions/Post"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Post"
        400:
          description: "Bad Request"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /post/{postId}:
    get:
      tags:
      - "post"
      summary: "Obtiene el post según su ID"
      description: "Regresa un solo objeto"
      operationId: "getPostById"
      produces:
      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        description: "ID of the post to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "ok"
          schema:
            $ref: "#/definitions/Post"
        400:
          description: "Bad request"
        404:
          description: "Post not found"
      security:
      - api_key: [AIzaSyCkSATAVKJu6ygAENDiY0s-WCzkaCessPU]
    patch:
      tags:
      - "post"
      summary: "Actualiza el post"
      description: ""
      operationId: "updatePost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
        description: "ID of post that needs to be updated"
      - name: "body"
        in: "body"
        schema:
          $ref: "#/definitions/Post"
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Post"
        405:
          description: "Invalid input"
      security:
      - api_key: [AIzaSyCkSATAVKJu6ygAENDiY0s-WCzkaCessPU]
    delete:
      tags:
      - "post"
      summary: "Elimina un post"
      description: ""
      operationId: "deletePost"
      produces:
      - "application/json"
      parameters:
      - name: "Authentication"
        in: "header"
        required: true
        type: "string"
      - name: "postId"
        in: "path"
        description: "Post id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No content"
        400:
          description: "Bad request"
        404:
          description: "Post not found"
      security:
      - api_key: [AIzaSyCkSATAVKJu6ygAENDiY0s-WCzkaCessPU]
  /api-token-auth:
    post:
      tags:
      - "token"
      summary: "Obtiene el token del usuario"
      description: ""
      operationId: "getUserToken"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: "body"
          in: "body"
          schema:
            $ref : "#/definitions/Login"
      responses:
        200:
          description: "successful"
          schema:
            $ref: "#/definitions/Token"
        400:
          description: "bad request"
      
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Post:
    type: "object"
    required:
    - "title"
    - "body"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      title:
        type: "string"
        example: "My awesome title"
      body:
        type: "string"
        example: "My extraordinary content"
    xml:
      name: "Post"
  Token:
    type: "object"
    properties:
      Token:
        type: "string"
        example: "thisismytoken123456"
    xml:
      name: "Token"
  Login:
    type: "object"
    properties:
      username:
        type: "string"
        example: "mail@mail.com"
      password:
        type: "string"
    xml:
      name: "Login"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"